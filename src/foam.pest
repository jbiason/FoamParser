spaces = _{ " " | "\t" | "\r" | "\n" }
letters = _{ 'a'..'z' | 'A'..'Z' }
numbers = _{ '0'..'9' }
special_chars = _{ "_" | "." | "*" }

multi_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
single_comment = _{ "//" ~ (!NEWLINE ~ ANY)* }

// This is a special rule of Pest, defining what `~` can hold -- unless the
// rule starts with `@`, meaning there are no WHITESPACE between elements.
WHITESPACE = _{ (spaces | multi_comment | single_comment)+ }

// p(U) is a valid defintion (as long as it doesn't have any separators), but
// they always must start with a letter.
def_middle = _{ (letters | numbers | special_chars | "(" ~ def_middle ~ ")")+ } 
definition = @{ letters ~ def_middle+ }
value = @{ (letters | numbers)+ ~ (letters | numbers | special_chars)* }

// Lists are represented with "(" and ")".
// Before the first bracket, a number can appear, to point the number of
// elements in the list (e.g., `a_list (1 2 3);`)
// Lists can have list as elements; only the top level one needs a `;` after
// it; e.g `a_list ( (inner list) (no semicolons) );`
list_size = _{ numbers+ }
list = { list_size? 
	~ "("
	~ element
	~ element*
	~ ")" }

// Dictionaries have "{" and "}", but everything inside is a definition.
dictionary = { "{"
	~ (attribution | dictionary)
	~ (attribution | dictionary)*
	~ "}" }

// At top level, everything is an attribution. Everything is "definition
// value;" but the format accepts multiple values in one attribution (e.g.,
// `definition value1 value2 value3;`). Not sure the difference between this
// kind of attribution and the usage of a list.
// Inside dictionaries, the attribution of values also requires the tailing
// `;`.
element = _{ value | list }
attribution = { definition 
	~ element 
	~ element* 
	~ ";" }
inner = { attribution* }

file = _{ SOI ~
	inner
	~ EOI }

// include = { "#" ~ identifier ~ separator ~ "\"" ~ identifier ~ "\"" }
// dictionary = { identifier ~ separator ~ "{" ~ (
// 	dictionary
// 	| list
// 	| attribution 
// 	| whitespace 
// 	| multi_comment 
// 	| single_comment 
// 	| include
// 	)+ ~ "}" }
